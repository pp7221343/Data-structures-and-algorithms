package com.wms.demo.struct;

import java.util.Arrays;

public class LargeIntegerOperation {


    public String operation(String a,String b){
        System.out.println("a:"+a);
        System.out.println("b:"+b);

        StringBuilder numa = b(a);

        StringBuilder numb = b(b);
        Integer[] result = null;

        if(a.length() > b.length()){
            result = new Integer[a.length()+1];
        } else{
            result = new Integer[b.length()+1];
        }
        //运算两个数组
        for(int i=0;i<result.length;i++){
            System.out.println("i:"+i);
            System.out.println("start result:"+ Arrays.toString(result));

            if(result[i] == null){
                result[i] = 0;
            }
            if(i<= a.length()-1){
                result[i] += (int) numa.charAt(i)-'0';
                System.out.println("(int) numa.charAt(i):"+((int) numa.charAt(i)-'0'));
                System.out.println("result:"+ Arrays.toString(result));
            }
            if(i<= b.length()-1){
                result[i] += (int) numb.charAt(i)-'0';
                System.out.println("(int) numb.charAt(i):"+((int) numb.charAt(i)-'0'));
                System.out.println("result:"+ Arrays.toString(result));
            }
            System.out.println("result[i]%10:"+ result[i]%10);
            System.out.println("result[i]/10:"+ result[i]/10);
            if(result[i] > 10){
                Integer temp = result[i];
                result[i] = temp%10;
                System.out.println("result[i]%10:"+ result[i]%10);
                result[i+1] = 0;
                result[i+1] += temp/10;
                System.out.println("result[i]/10:"+ result[i]/10);
            }

        }

        StringBuilder stringBuilder = new StringBuilder();
        int itera =result.length-1;
        if(result[result.length-1] == 0 || result[result.length-1] == null){
            itera--;
        }
        for(int i=itera;i>=0;i--){
            stringBuilder.append(result[i]);
        }
        System.out.println("stringBuilder:"+stringBuilder);

        return stringBuilder.toString();

    }

    //倒叙字符串
    public StringBuilder b(String str){
        StringBuilder sbb = new StringBuilder();
        for (int i = str.length() - 1; i >= 0; i--) {
            sbb.append(str.charAt(i));
        }
        System.out.println(sbb.toString());
        return sbb;
    }


    public String test(String str){
//        StringBuilder sbb = new StringBuilder();
//        for (int i = str.length() - 1; i >= 0; i--) {
//            sbb.append(str.charAt(i));
//        }
//        System.out.println(sbb.toString());

        String a = "1";
        System.out.println((int) a.charAt(0)-'0');
//        return sbb.toString();
        return "a";

    }
}

时间复杂度：O(n)
